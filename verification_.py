# -*- coding: utf-8 -*-
"""Verification .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I4nssyEt4ieIco5Jw-MatDTdHofgln08
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install Pillow

"""# **Verification**"""

from skimage.metrics import structural_similarity as ssim
from skimage.metrics import mean_squared_error as mse
from skimage.metrics import peak_signal_noise_ratio as psnr
from skimage import io
import numpy as np

# Load the images
image_path1 = '/content/drive/MyDrive/Dataset/Cook_house_waste/image1.jpg'
image_path2 = '/content/drive/MyDrive/Preprocessing/Cook_house_waste/image1.jpg'


# Read the images
ref_image = io.imread(image_path1, as_gray=True)
distorted_image = io.imread(image_path2, as_gray=True)

# Check if the dimensions match
if ref_image.shape != distorted_image.shape:
    print("Images have different dimensions.")
else:
    # Example using SSIM:
    ssim_score = ssim(ref_image, distorted_image)
    print(f"SSIM Score: {ssim_score}")

    # Example using RMSE:
    rmse_score = np.sqrt(mse(ref_image, distorted_image))
    print(f"RMSE Score: {rmse_score}")

    # Calculate MSCE (Mean Squared Contrast Error)
    msce_value = mse(ref_image - ref_image.mean(), distorted_image - distorted_image.mean())
    print(f"MSCE Score: {msce_value}")

    # Example using PSNR:
    psnr_score = psnr(ref_image, distorted_image)
    print(f"PSNR Score: {psnr_score}")

from skimage.metrics import structural_similarity as ssim
from skimage.metrics import mean_squared_error as mse
from skimage.metrics import peak_signal_noise_ratio as psnr
from skimage import io
import numpy as np

# Load the images
image_path1 = '/content/drive/MyDrive/Dataset/Glass_waste/image2.jpg'
image_path2 = '/content/drive/MyDrive/Preprocessing/Glass_waste/image2.jpg'


# Read the images
ref_image = io.imread(image_path1, as_gray=True)
distorted_image = io.imread(image_path2, as_gray=True)

# Check if the dimensions match
if ref_image.shape != distorted_image.shape:
    print("Images have different dimensions.")
else:
    # Example using SSIM:
    ssim_score = ssim(ref_image, distorted_image)
    print(f"SSIM Score: {ssim_score}")

    # Example using RMSE:
    rmse_score = np.sqrt(mse(ref_image, distorted_image))
    print(f"RMSE Score: {rmse_score}")

    # Calculate MSCE (Mean Squared Contrast Error)
    msce_value = mse(ref_image - ref_image.mean(), distorted_image - distorted_image.mean())
    print(f"MSCE Score: {msce_value}")

    # Example using PSNR:
    psnr_score = psnr(ref_image, distorted_image)
    print(f"PSNR Score: {psnr_score}")